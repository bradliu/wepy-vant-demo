<style lang="scss">



</style>

<template>

<demo-block1 title="文字提示" :padding="blockPadding">
  <van-button1 @click.user="showToast">文字提示</van-button1>
</demo-block1>

<demo-block2 title="加载提示" :padding="blockPadding">
  <van-button2 @click.user="showLoadingToast">加载提示</van-button2>
</demo-block2>

<demo-block3 title="成功/失败提示" :padding="blockPadding">
  <van-button3 @click.user="showSuccessToast" customClass="demo-margin-right">成功提示</van-button3>
  <van-button4 @click.user="showFailToast">失败提示</van-button4>
</demo-block3>

<demo-block4 title="高级用法" :padding="blockPadding">
  <van-button5 @click.user="showCustomizedToast">高级用法</van-button5>
</demo-block4>

<van-toast1 :show.sync="showToast" message="我是提示文案，建议不超过十五字~" />
<van-toast2 :show.sync="showLoadingToast" mask="y" message="加载中..." type="loading" />
<van-toast3 :show.sync="showSuccessToast" customClass="demo-margin-right" message="成功案例" type="success" />
<van-toast4 :show.sync="showFailToast" message="失败提示" type="fail" />
<van-toast5 :show.sync="showCustomizedToast" :message.sync="customizedMessage" :duration="customizedDuration" type="loading" loadingType="spinner" forbidClick="y" />

</template>

<script>
import wepy from 'wepy'
import demoBlock from '../components/demo-block'
import vanButton from  '../components/van-button'
import vanToast from  '../components/van-toast'

export default class ToastPage extends wepy.page {

  config = {
    "navigationBarTitleText": "Toast 轻提示"
  }

  components = {
    'demo-block1': demoBlock,
    'demo-block2': demoBlock,
    'demo-block3': demoBlock,
    'demo-block4': demoBlock,
    'van-button1': vanButton,
    'van-button2': vanButton,
    'van-button3': vanButton,
    'van-button4': vanButton,
    'van-button5': vanButton,
    'van-toast1': vanToast,
    'van-toast2': vanToast,
    'van-toast3': vanToast,
    'van-toast4': vanToast,
    'van-toast5': vanToast
  }
  
  data = {
    blockPadding: true,
    showToast: false,
    showLoadingToast: false,
    showSuccessToast: false,
    showFailToast: false,
    showCustomizedToast: false,
    customizedMessage: '',
    customizedDuration: '5000'
  }
  
  methods = {
    showToast() {
      this.showToast = true;
      this.$apply();
    },

    showLoadingToast() {
      this.showLoadingToast = true;
      this.$apply();
    },

    showSuccessToast() {
      this.showSuccessToast = true;
      this.$apply();
    },

    showFailToast() {
      this.showFailToast = true;
      this.$apply();
    },

    showCustomizedToast() {
      const text = second => `倒计时 ${second} 秒`;
      let second = parseInt(this.customizedDuration/1000);
      this.customizedMessage = text(second);
      this.showCustomizedToast = true;
      let that = this;
      const timer = setInterval(() => {
        second--;
        if (second) {
          that.customizedMessage = text(second);
        } else {
          clearInterval(timer);
          that.showCustomizedToast = false;
        }
        that.$apply();
      }, 1000);

      this.$apply();
    }

  }
  
}
</script>
