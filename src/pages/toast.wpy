<style lang="scss">



</style>

<template>

<demo-block1 title="文字提示" :padding="blockPadding">
  <van-button1 @click.user="showToast">文字提示</van-button1>
</demo-block1>

<demo-block2 title="加载提示" :padding="blockPadding">
  <van-button2 @click.user="showLoadingToast">加载提示</van-button2>
</demo-block2>

<demo-block3 title="成功/失败提示" :padding="blockPadding">
  <van-button3 @click.user="showSuccessToast" customClass="demo-margin-right">成功提示</van-button3>
  <van-button4 @click.user="showFailToast">失败提示</van-button4>
</demo-block3>

<demo-block4 title="高级用法" :padding="blockPadding">
  <van-button5 @click.user="showCustomizedToast">高级用法</van-button5>
</demo-block4>

<van-toast id="van-toast" />

</template>

<script>
import wepy from 'wepy'
import demoBlock from '../components/demo-block'
import vanButton from  '../components/van-button'
import vanToast from  '../components/van-toast'
import Toast from '../utils/toast'

export default class ToastPage extends wepy.page {

  config = {
    "navigationBarTitleText": "Toast 轻提示"
  }

  components = {
    'demo-block1': demoBlock,
    'demo-block2': demoBlock,
    'demo-block3': demoBlock,
    'demo-block4': demoBlock,
    'van-button1': vanButton,
    'van-button2': vanButton,
    'van-button3': vanButton,
    'van-button4': vanButton,
    'van-button5': vanButton,
    'van-toast': vanToast
  }
  
  data = {
    blockPadding: true
  }
  
  methods = {
    showToast() {
      console.log(Toast);
      console.log('show toast');
      Toast('我是提示文案，建议不超过十五字~');
    },

    showLoadingToast() {
      Toast.loading({ mask: true, message: '加载中...' });
    },

    showSuccessToast() {
      Toast.success('成功文案');
    },

    showFailToast() {
      Toast.fail('失败提示');
    },

    showCustomizedToast(duration) {
      const text = second => `倒计时 ${second} 秒`;
      const toast = Toast.loading({
        duration: 0,
        forbidClick: true,
        loadingType: 'spinner',
        message: text(3)
      });

      let second = 3;
      const timer = setInterval(() => {
        second--;
        if (second) {
          toast.setData({ message: text(second) });
        } else {
          clearInterval(timer);
          Toast.clear();
        }
      }, 1000);
    }
  }
  
}
</script>