<style lang="scss">

@import '../styles/var.scss';

.van-button {
  position: relative;
  padding: 0;
  display: inline-block;
  height: 44px;
  line-height: 42px;
  border-radius: 3px;
  box-sizing: border-box;
  font-size: 16px;
  text-align: center;
  vertical-align: middle;
  -webkit-appearance: none;
  -webkit-text-size-adjust: 100%;

  &::after {
    content: " ";
    position: absolute;
    top: 50%;
    left: 50%;
    opacity: 0;
    width: 100%;
    height: 100%;
    border: inherit;
    border-color: $black;
    background-color: $black;
    border-radius: inherit; /* inherit parents border radius */
    transform: translate(-50%, -50%);
  }

  &:active::after {
    opacity: .3;
  }

  &--unclickable::after {
    display: none;
  }

  &--default {
    color: $button-default-color;
    background-color: $button-default-background-color;
    border: 1px solid $button-default-border-color;
  }

  &--primary {
    color: $button-primary-color;
    background-color: $button-primary-background-color;
    border: 1px solid $button-primary-border-color;
  }

  &--danger {
    color: $button-danger-color;
    background-color: $button-danger-background-color;
    border: 1px solid $button-danger-border-color;
  }

  &--warning {
    color: $button-warning-color;
    background-color: $button-warning-background-color;
    border: 1px solid $button-warning-border-color;
  }

  &--plain {
    background-color: $white;

    &.van-button--primary {
      color: $button-primary-background-color;
    }

    &.van-button--danger {
      color: $button-danger-background-color;
    }

    &.van-button--warning {
      color: $button-warning-background-color;
    }
  }

  &--large {
    width: 100%;
    height: 50px;
    line-height: 48px;
  }

  &--normal {
    padding: 0 15px;
    font-size: 14px;
  }

  &--small {
    height: 30px;
    padding: 0 8px;
    min-width: 60px;
    font-size: 12px;
    line-height: 28px;
  }

  &--loading {
    .van-loading {
      display: inline-block;
    }

    .van-button__text {
      display: none;
    }
  }

  /* mini图标默认宽度50px，文字不能超过4个 */
  &--mini {
    display: inline-block;
    width: 50px;
    height: 22px;
    line-height: 20px;
    font-size: 10px;

    & + .van-button--mini {
      margin-left: 5px;
    }
  }

  &--block {
    width: 100%;
    display: block;
  }

  &--square {
    border-radius: 0;
  }

  &--disabled {
    color: $button-disabled-color;
    background-color: $button-disabled-background-color;
    border: 1px solid $button-disabled-border-color;
  }
}

</style>

<template>

<button
  class="{{ externalClasses[0] }} van-button {{ classes }}"
  disabled="{{ disabled }}"
  hover-class="button-hover"
  open-type="{{ openType }}"
  app-parameter="{{ appParameter }}"
  hover-stop-propagation="{{ hoverStopPropagation }}"
  hover-start-time="{{ hoverStartTime }}"
  hover-stay-time="{{ hoverStayTime }}"
  lang="{{ lang }}"
  session-from="{{ sessionFrom }}"
  send-message-title="{{ sendMessageTitle }}"
  send-message-path="{{ sendMessagePath }}"
  send-message-img="{{ sendMessageImg }}"
  show-message-card="{{ showMessageCard }}"
  bindtap="onClick"
>
  <van-loading
    wx:if="{{ loading }}"
    size="20px"
    custom-class="{{ externalClasses[1] }}"
    color="{{ type === 'default' ? '#c9c9c9' : '#fff' }}"
  />
  <slot></slot>
</button>


</template>

<script>
import wepy from 'wepy'

import classnames from '../utils/classnames'

export default class vanButton extends wepy.component {
  
  props = {
    externalClasses: {
      type: Array,
      default: ['custom-class', 'loading-class']
    },
    type: {
      type: String,
      default: 'default'
    },
    size: {
      type: String,
      default: 'normal'
    },
    plain: Boolean,
    disabled: Boolean,
    loading: Boolean,
    block: Boolean,
    square: Boolean,

    loading: Boolean,
    // 在自定义组件中，无法与外界的 form 组件联动，暂时不开放
    // formType: String,
    openType: String,
    appParameter: String,
    // 暂时不开放，直接传入无法设置样式
    // hoverClass: {
    //   type: String,
    //   default: 'button-hover'
    // },
    hoverStopPropagation: Boolean,
    hoverStartTime: {
      type: Number,
      default: 20
    },
    hoverStayTime: {
      type: Number,
      default: 70
    },
    lang: {
      type: String,
      default: 'en'
    },
    sessionFrom: {
      type: String,
      default: ''
    },
    sendMessageTitle: String,
    sendMessagePath: String,
    sendMessageImg: String,
    showMessageCard: String
  }

  data = {
    classes: ''
  }

  onLoad() {
    this.methods.setClasses.call(this);
  }

  methods = {
    onClick() {
      if (!this.disabled && !this.loading) {
        this.$emit('click');
        this.$emit('getuserinfo');
        this.$emit('contact');
        this.$emit('getphonenumber');
        this.$emit('opensetting');
        this.$emit('error');
      }
    },

    setClasses() {
      const { type, size, plain, disabled, loading, square, block } = this.data;
      this.classes = classnames(`van-button--${type}`, `van-button--${size}`, {
          'van-button--block': block,
          'van-button--plain': plain,
          'van-button--square': square,
          'van-button--loading': loading,
          'van-button--disabled': disabled,
          'van-button--unclickable': disabled || loading
        });
      this.$apply();
    }
  }

}
</script>
