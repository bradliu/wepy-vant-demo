<style lang="scss">

@import '../styles/var.scss';

.van-progress {
  height: 4px;
  position: relative;
  border-radius: 4px;
  background: $gray-light;

  &__portion {
    left: 0;
    height: 100%;
    position: absolute;
    border-radius: inherit;

    &--with-pivot {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  &__pivot {
    top: 50%;
    right: 0;
    min-width: 2em;
    padding: 0 5px;
    font-size: 10px;
    position: absolute;
    line-height: 1.6;
    text-align: center;
    border-radius: 1em;
    word-break: keep-all;
    box-sizing: border-box;
    background-color: $gray-light;
    transform: translate(100%, -50%);
  }
}

</style>

<template>

<view class="van-progress {{ externalClasses[0] }}">
  <view
    class="van-progress__portion {{ showPivot && text ? 'van-progress__portion--with-pivot' : '' }}"
    style="{{ portionStyle }}" 
  >
    <view
      v-if="{{ showPivot && text }}"
      style="{{ pivotStyle }}"
      class="van-progress__pivot"
    >
      {{ text }}
    </view>
  </view>
</view>

</template>

<script>
import wepy from 'wepy'

import comOptionsMixin from '../mixins/com-options'

export default class vanProgress extends wepy.component {

  mixins = [ comOptionsMixin ]
  
  props = {
    externalClasses: {
      type: Array,
      default: [
        'custom-class'
      ]
    },
    options: Object,
    inactive: {
      type: Boolean
    },
    pivotColor: {
      type: String
    },
    percentage: {
      type: String
    },
    showPivot: {
      type: Boolean,
      default: true
    },
    pivotText: {
      type: String
    },
    color: {
      type: String,
      default: '#38f'
    },
    textColor: {
      type: String,
      default: '#fff'
    }
  }
  
  data = {
    pivotWidth: 0,
    progressWidth: 0,
    portionStyle: '',
    pivotStyle: '',
    text: ''
  }

  watch = {
      inactive() {
          this.methods.setPivotStyle.call(this);
          this.methods.setPortionStyle.call(this);
          this.$apply();
      },
      pivotColor() {
        this.methods.setPivotStyle.call(this);
        this.$apply();
      },
      percentage() {
        this.methods.setText.call(this);
        this.methods.setPortionStyle.call(this);
        this.$apply();
      },
      showPivot() {
        this.methods.getWidth.call(this);
        this.$apply();
      },
      pivotText() {
        this.methods.setText.call(this);
        this.methods.getWidth.call(this);
        this.$apply();
      },
      color() {
        this.methods.setPivotStyle.call(this);
        this.methods.setPortionStyle.call(this);
        this.$apply();
      },
      textColor() {
        this.methods.setPivotStyle.call(this);
        this.$apply();
      },
      options(newValue, oldValue) {
        this.applyOptions();
      }
  }

  onLoad() {
    this.methods.setText.call(this);
    this.methods.setPivotStyle.call(this);
    this.methods.getWidth.call(this);
    this.$apply();
  }
  
  methods = {
    getCurrentColor() {
      return this.inactive ? '#cacaca' : this.color;
    },

    setText() {
      this.text = this.pivotText || this.percentage + '%';
    },

    setPortionStyle() {
      const width = (this.progressWidth - this.pivotWidth) * this.percentage / 100 + 'px';
      const background = this.methods.getCurrentColor.call(this);
      this.portionStyle = `width: ${width}; background: ${background}; `;
    },

    setPivotStyle() {
      const color = this.textColor;
      const background = this.pivotColor || this.methods.getCurrentColor.call(this);
      this.pivotStyle = `color: ${color}; background: ${background}`;
    },

    getRect(selector, callback) {
      wx.createSelectorQuery()
        .select(selector)
        .boundingClientRect(rect => {
          rect && callback(rect);
        })
        .exec();
    },

    getWidth() {
      var that = this;
      this.methods.getRect.call(this,'.van-progress', rect => {
        that.progressWidth = rect.width;
        that.methods.setPortionStyle.call(that);
        that.$apply();
      });

      this.methods.getRect.call(this,'.van-progress__pivot', rect => {
        that.pivotWidth = rect.width || 0;
        that.methods.setPortionStyle.call(that);
        that.$apply();
      });
    }
  }
  
}
</script>
