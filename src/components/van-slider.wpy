<style lang="scss">

@import '../styles/var.scss';

.van-slider {
  position: relative;
  border-radius: 999px;
  background-color: $gray-light;

  &__bar {
    position: relative;
    border-radius: inherit;
    background-color: $blue;
  }

  &__button {
    position: absolute;
    top: 50%;
    right: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: $white;
    transform: translate3d(50%, -50%, 0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, .5);

    /* use pseudo element to expand touch area */
    &::after {
      content: '';
      position: absolute;
      width: 200%;
      height: 200%;
      top: -50%;
      left: -50%;
    }
  }

  &--disabled {
    opacity: .3;
  }
}

</style>

<template>

<view class="{{ customClass }} van-slider {{ disabled=='y' ? 'van-slider--disabled' : '' }}" bind:tap="onClick">
  <view class="van-slider__bar" style="{{ barStyle }}">
    <view
      class="van-slider__button"
      bind:touchstart="onTouchStart"
      catch:touchmove="onTouchMove"
      bind:touchend="onTouchEnd"
      bind:touchcancel="onTouchEnd"
    />
  </view>
</view>

</template>

<script>
import wepy from 'wepy'
import TouchMixin from '../mixins/touch'
import ComOptionsMixin from '../mixins/com-options'

export default class vanSlider extends wepy.component {

  mixins = [ ComOptionsMixin, TouchMixin ]
  
  props = {
    options: Object,
    customClass: {
      type: String,
      default: 'custom-class'
    },
    disabled: {
      type: String,
      default: 'n'
    },
    max: {
      type: String,
      default: '100'
    },
    min: {
      type: String,
      default: '0'
    },
    step: {
      type: String,
      default: '1'
    },
    value: {
      type: String,
      default: '0'
    },
    barHeight: {
      type: String,
      default: '2px'
    }
  }
  
  data = {
    barStyle: ''
  }

  methods = {
    getRect(callback) {
      wx.createSelectorQuery()
        .select('.van-slider')
        .boundingClientRect(callback)
        .exec();
    },

    onTouchStart(event) {
      if (this.disabled=='y') return;

      this.touchStart.call(this, event);
      this.startValue = this.methods.format.call(this, this.value);
      this.$apply();
    },

    onTouchMove(event) {
      if (this.disabled=='y') return;
      this.touchMove.call(this, event);
      let that = this;
      this.methods.getRect.call(this,rect => {
        const diff = that.deltaX / rect.width * 100;
        that.methods.updateValue.call(that, that.startValue + diff);
      });
    },

    onTouchEnd() {
      if (this.disabled=='y') return;
      this.methods.updateValue.call(this, this.value, true);
    },

    onClick(event) {
      if (this.disabled=='y') return;
      let that = this;
      this.methods.getRect.call(this, rect => {
        const value = (event.detail.x - rect.left) / rect.width * 100;
        that.methods.updateValue.call(that, value, true);
      });
    },

    updateValue(value, end) {
      value = this.methods.format.call(this, value);
      this.value = value;
      this.barStyle = `width: ${value}%; height: ${this.barHeight};`;
      if (end) {
        this.$emit('change', value);
      }
      this.$apply();
    },

    format(value) {
      const { max, min, step } = this.data;
      return Math.round(Math.max(min, Math.min(value, max)) / step) * step;
    }
  }
  
  onLoad() {
    this.methods.updateValue.call(this, this.value);
  }
  
}
</script>
