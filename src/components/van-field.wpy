<style lang="scss">

@import '../styles/var.scss';
@import '../vant/cell.scss';

.van-field {
  &__body {
    display: flex;
    align-items: center;

    &--textarea {
      min-height: 24px;
    }
  }

  &__control {
    border: 0;
    margin: 0;
    padding: 0;
    width: 100%;
    resize: none;
    display: block;
    text-align: left;
    box-sizing: border-box;
    line-height: inherit;
    background-color: transparent;

    &--disabled {
      opacity: 1;
      color: $gray-darker;
      background-color: transparent;
    }

    &--center {
      text-align: center;
    }

    &--right {
      text-align: right;
    }
  }

  &__clear,
  &__icon-container,
  &__button {
    flex-shrink: 0;
  }

  &__clear,
  &__icon-container {
    padding: 0 10px;
    color: $gray-dark;
    line-height: inherit;
    margin-right: -10px;
    vertical-align: middle;
  }

  &__icon {
    display: block;
    font-size: 16px;
    line-height: inherit;
  }

  &__button {
    padding-left: 10px;
  }

  &__error-message {
    color: $red;
    font-size: 12px;
    text-align: left;
  }

  &--error {
    color: $red;
  }

  &--label {
    &-center {
      .van-cell__title {
        text-align: center;
      }
    }

    &-right {
      .van-cell__title {
        text-align: right;
      }
    }
  }
}

</style>

<template>

  <view
  class="{{ customClass }} van-field {{ labelAlign ? 'van-field--label-' + labelAlign : '' }} van-cell {{ center=='y' ? 'van-cell--center' : '' }} {{ required=='y' ? 'van-cell--required' : '' }} {{ isLink=='y' || clickable ? 'van-cell--clickable' : '' }} {{ border=='y' ? 'van-hairline' : '' }}"  
  style="{{ customStyle }}"
  bind:tap="onClick"
>
    <van-icon wx:if="{{ leftIcon }}" custom-class="van-cell__left-icon left-icon-class" name="{{ leftIcon }}" />
    <view wx:if="{{ label }}" class="van-cell__title title-class" style="max-width: 90px; min-width: 90px;">
      {{ label }}
    </view>
    <view class="van-cell__value value-class">
      
      <slot name="label" slot="title" />
      <view class="van-field__body {{ type === 'textarea' ? 'van-field__body--textarea' : '' }}">
        <textarea
          wx:if="{{ type === 'textarea' }}"
          class="input-class van-field__control van-field__textarea {{ inputAlign ? 'van-field--' + inputAlign : '' }} {{ error=='y' ? 'van-field--error' : '' }} {{ disabled=='y' ? 'van-field__control--disabled' : '' }}"
          focus="{{ focus }}"
          value="{{ value }}"
          disabled="{{ disabled }}"
          readonly="{{ readonly }}"
          maxlength="{{ maxlength }}"
          placeholder="{{ placeholder }}"
          auto-height="{{ autosize }}"
          placeholder-class="{{ placeholderClass }} {{ error=='y' ? 'van-field--error' : '' }}"
          cursor-spacing="{{ cursorSpacing }}"
          bindinput="onInput"
          bind:blur="onBlur"
          bind:focus="onFocus"
          bind:confirm="onConfirm"
        />
        <input
          wx:else
          class="input-class van-field__control {{ inputAlign ? 'van-field--' + inputAlign : '' }} {{ error=='y' ? 'van-field--error' : '' }} {{ disabled=='y' ? 'van-field__control--disabled' : '' }}"
          type="{{ type }}"
          focus="{{ focus }}"
          value="{{ value }}"
          disabled="{{ disabled }}"
          readonly="{{ readonly }}"
          maxlength="{{ maxlength }}"
          placeholder="{{ placeholder }}"
          placeholder-class="{{ placeholderClass }} {{ error=='y' ? 'van-field--error' : '' }}"
          confirm-type="{{ confirmType }}"
          cursor-spacing="{{ cursorSpacing }}"
          bindinput="onInput"
          bind:blur="onBlur"
          bind:focus="onFocus"
          bind:confirm="onConfirm"
        />
        <van-icon
          wx:if="{{ showClear }}"
          name="clear"
          custom-class="van-field__clear"
          bind:touchstart="onClear"
        />
        <view class="van-field__icon-container" wx:if="{{ icon || useIconSlot }}" bind:tap="onClickIcon">
          <van-icon
            wx:if="{{ icon }}"
            name="{{ icon }}"
            custom-class="van-field__icon {{ iconClass }}"
          />
          <slot wx:else name="icon" />
        </view>
        <view wx:if="{{ useButtonSlot }}" class="van-field__button">
          <slot name="button" />
        </view>
      </view>
      <view wx:if="{{ errorMessage }}" class="van-field__error-message">
        {{ errorMessage }}
      </view>
      
    </view>
    <van-icon
      wx:if="{{ isLink }}"
      name="arrow"
      custom-class="van-cell__right-icon right-icon-class {{ arrowDirection ? 'van-cell__right-icon--' + arrowDirection : '' }}"
    />
  </view>

  
</view>

</template>

<script>
import wepy from 'wepy'
import ComOptionsMixin from '../mixins/com-options'

export default class vanField extends wepy.component {

  mixins = [ ComOptionsMixin ]
  
  props = {
    externalClasses: {
      type: Array,
      default: ['input-class']
    },
    options: Object,
    icon: String,
    label: String,
    error: {
      type: String,
      default: 'n'
    },
    focus: {
      type: String,
      default: 'n'
    },
    center: {
      type: String,
      default: 'n'
    },
    isLink: {
      type: String,
      default: 'n'
    },
    leftIcon: String,
    disabled: {
      type: String,
      default: 'n'
    },
    autosize: {
      type: String,
      default: 'n'
    },
    readonly: {
      type: String,
      default: 'n'
    },
    required: {
      type: String,
      default: 'n'
    },
    iconClass: String,
    clearable: {
      type: String,
      default: 'n'
    },
    labelAlign: String,
    inputAlign: String,
    customClass: String,
    confirmType: String,
    errorMessage: String,
    placeholder: String,
    customStyle: String,
    useIconSlot: {
      type: String,
      default: 'n'
    },
    useButtonSlot: {
      type: String,
      default: 'n'
    },
    placeholderClass: String,
    cursorSpacing: {
      type: String,
      default: '50'
    },
    maxlength: {
      type: String,
      default: '-1'
    },
    value: {
      type: String,
      default: ''
    },
    type: {
      type: String,
      default: 'text'
    },
    border: {
      type: String,
      value: 'y'
    }
  }
  
  data = {
    focused: false,
    showClear: false
  }

  methods = {
    onInput(event) {
      const { value = '' } = event.detail || {};
      this.$emit('input', value);
      this.$emit('change', value);
      this.value = value;
      this.showClear = this.methods.getShowClear.call(this, { value });
      this.$apply();
    },

    onFocus(event) {
      this.$emit('focus', event);
      this.focused = 'y';
      this.showClear = this.methods.getShowClear.call(this, { focused: 'y' });
      this.$apply();
    },

    onBlur(event) {
      this.focused = 'n';
      this.$emit('blur', event);
      this.focused = 'n';
      this.showClear = this.methods.getShowClear.call(this, { focused: 'n' });
      this.$apply();
    },

    onClickIcon() {
      this.$emit('click-icon');
    },

    getShowClear(options) {
      const {
        focused = this.focused,
        value = this.value
      } = options;

      return this.clearable=='y' && focused=='y' && value !== '' && this.readonly!='y';
    },

    onClear() {
      this.value = '';
      this.showClear = this.methods.getShowClear.call(this, { value: '' });
      this.$emit('input', '');
      this.$emit('change', '');
      this.$apply();
    },

    onConfirm() {
      this.$emit('confirm', this.value);
    }
  }
  
}
</script>
